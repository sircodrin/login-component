GET     /            dot.cpp.login.controllers.UserController.modifyUser(id: String)
GET     /get         dot.cpp.login.controllers.UserController.get(id: String)
GET     /find        dot.cpp.login.controllers.UserController.findByValue(field: String, value: String)
GET     /save        dot.cpp.login.controllers.UserController.save()
GET     /init        dot.cpp.repository.controllers.InitController.init()

GET     /login       dot.cpp.login.controllers.UserController.loginPage(request: Request, userLoggedIn: Boolean ?= true)
POST    /login       dot.cpp.login.controllers.UserController.login(request: Request)
POST    /logout      dot.cpp.login.controllers.UserController.logout(request: Request)
POST    /refresh-access     dot.cpp.login.controllers.UserController.refreshAccessToken(request: Request)

GET     /forgot-password    dot.cpp.login.controllers.UserController.forgotPasswordPage(request: Request)
POST    /forgot-password    dot.cpp.login.controllers.UserController.forgotPassword(request: Request)
GET     /reset-password/:uuid    dot.cpp.login.controllers.UserController.resetPasswordPage(request: Request, uuid: String)
POST    /reset-password/:uuid    dot.cpp.login.controllers.UserController.resetPassword(request: Request, uuid: String)

GET     /invite-user    dot.cpp.login.controllers.UserController.inviteUserPage(request: Request)
POST    /invite-user    dot.cpp.login.controllers.UserController.inviteUser(request: Request)
GET     /accept-invite/:uuid    dot.cpp.login.controllers.UserController.registerByInvitePage(request: Request, uuid: String)
POST    /accept-invite/:uuid    dot.cpp.login.controllers.UserController.registerByInvite(request: Request, uuid: String)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
